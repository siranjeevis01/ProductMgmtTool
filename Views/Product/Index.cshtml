@model IEnumerable<ProductMgmt.Models.Product>
@using System.Globalization

@{
    ViewData["Title"] = "Products";
    var categories = ViewBag.Categories as IEnumerable<ProductMgmt.Models.Category>;
}

<h2 class="mb-4 text-dark fw-bold">
    <i class="bi bi-shop me-2"></i> Products
</h2>

<div class="d-flex flex-wrap align-items-center mb-4 gap-2">
    <a asp-action="Create" class="btn btn-lg fw-bold create-btn shadow-sm">
        <i class="bi bi-plus-circle me-2"></i> Add New Product
    </a>

    <!-- Search -->
    <input type="text" id="searchBox" class="form-control w-auto shadow-sm" placeholder="🔍 Search by name or SKU" />

    <!-- Filter Category -->
    <select id="categoryFilter" class="form-select w-auto shadow-sm">
        <option value="">All Categories</option>
        @foreach (var cat in Model.Select(a => a.Category).Where(c => c != null).Distinct())
        {
            <option value="@cat!.Name">@cat!.Name</option>
        }
    </select>

    <!-- Sort -->
    <select id="sortFilter" class="form-select w-auto shadow-sm">
        <option value="">Sort by</option>
        <option value="name">Name</option>
        <option value="priceLow">Price: Low to High</option>
        <option value="priceHigh">Price: High to Low</option>
    </select>
</div>

<div class="row g-4" id="productContainer">
    @foreach (var product in Model)
    {
        <div class="col-sm-6 col-md-4 col-lg-3 product-item animate__animated animate__fadeInUp" 
             data-name="@product.Name.ToLower()" 
             data-sku="@product.SKU.ToLower()" 
             data-category="@product.Category?.Name" 
             data-price="@product.Price">
             
            <div class="card product-card shadow-sm rounded-4 h-100">
                <div class="position-relative">
                    <img src="@(!string.IsNullOrEmpty(product.ImageUrl) ? product.ImageUrl : "/images/product-placeholder.png")"
                         class="card-img-top rounded-top-4" alt="@product.Name" 
                         onerror="this.src=/images/product-placeholder.png">
                    @if (product.Category != null)
                    {
                        <span class="badge category-badge">@product.Category.Name</span>
                    }
                </div>
                <div class="card-body d-flex flex-column">
                    <h5 class="card-title fw-bold text-truncate">@product.Name</h5>
                    <p class="text-muted mb-1">SKU: @product.SKU</p>
                    <p class="price mb-2 fw-bold">@product.Price.ToString("C", new CultureInfo("en-IN"))</p>
        
                    <div class="mb-2 flex-grow-1">
                        @if (product.AttributeValues != null && product.AttributeValues.Any())
                        {
                            <ul class="list-unstyled mb-0">
                                @foreach (var attr in product.AttributeValues.Where(a => !string.IsNullOrWhiteSpace(a.Value)))
                                {
                                    <li class="attr-item">
                                        <strong>@attr.CategoryAttributeDefinition?.Name:</strong> @attr.Value
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <span class="text-muted fst-italic">No attributes</span>
                        }
                    </div>
        
                    <!-- Add to Cart Section -->
                    <div class="add-to-cart mb-3">
                        <div class="input-group input-group-sm">
                            <button class="btn btn-outline-secondary minus-btn" type="button">-</button>
                            <input type="number" class="form-control text-center quantity-input" 
                                   value="1" min="1" data-product-id="@product.Id">
                            <button class="btn btn-outline-secondary plus-btn" type="button">+</button>
                            <button class="btn btn-success add-cart-btn" type="button" 
                                    data-product-id="@product.Id">
                                <i class="bi bi-cart-plus"></i>
                            </button>
                        </div>
                    </div>
        
                    <div class="mt-auto d-flex justify-content-between">
                        <a asp-action="Details" asp-route-id="@product.Id" class="btn btn-sm btn-outline-primary w-50 me-1">
                            <i class="bi bi-eye me-1"></i> View
                        </a>
                        <a asp-action="Edit" asp-route-id="@product.Id" class="btn btn-sm btn-outline-warning w-50 ms-1">
                            <i class="bi bi-pencil me-1"></i> Edit
                        </a>
                    </div>
        
                    <form asp-action="Delete" asp-route-id="@product.Id" method="post" class="mt-2">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-outline-danger w-100" onclick="return confirm('Are you sure?');">
                            <i class="bi bi-trash me-1"></i> Delete
                        </button>
                    </form>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    // Filter and sort functionality
    const searchBox = document.getElementById("searchBox");
    const categoryFilter = document.getElementById("categoryFilter");
    const sortFilter = document.getElementById("sortFilter");
    const productContainer = document.getElementById("productContainer");

    function filterProducts() {
        let searchText = searchBox.value.toLowerCase();
        let selectedCategory = categoryFilter.value;
        let products = [...document.querySelectorAll(".product-item")];

        products.forEach(p => {
            let name = p.dataset.name;
            let sku = p.dataset.sku;
            let category = p.dataset.category;

            let matchesSearch = name.includes(searchText) || sku.includes(searchText);
            let matchesCategory = !selectedCategory || category === selectedCategory;

            p.style.display = (matchesSearch && matchesCategory) ? "" : "none";
        });
    }

    function sortProducts() {
        let products = [...document.querySelectorAll(".product-item")];
        let sortBy = sortFilter.value;

        products.sort((a, b) => {
            if (sortBy === "name") return a.dataset.name.localeCompare(b.dataset.name);
            if (sortBy === "priceLow") return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
            if (sortBy === "priceHigh") return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
            return 0;
        });

        products.forEach(p => productContainer.appendChild(p));
    }

    searchBox.addEventListener("input", filterProducts);
    categoryFilter.addEventListener("change", filterProducts);
    sortFilter.addEventListener("change", sortProducts);

    $(document).ready(function() {
        updateCartCount();
        
        $('.plus-btn').click(function() {
            var input = $(this).closest('.input-group').find('.quantity-input');
            var value = parseInt(input.val());
            input.val(value + 1);
        });
        
        $('.minus-btn').click(function() {
            var input = $(this).closest('.input-group').find('.quantity-input');
            var value = parseInt(input.val());
            if (value > 1) {
                input.val(value - 1);
            }
        });
        
        // Add to cart
        $('.add-cart-btn').click(function() {
            var productId = $(this).data('product-id');
            var quantity = $(this).closest('.add-to-cart').find('.quantity-input').val();
            
            $.post('@Url.Action("AddItem", "Cart")', {
                productId: productId,
                quantity: parseInt(quantity)
            }, function(response) {
                if (response.success) {
                    showToast('Product added to cart!', 'success');
                    
                    $('#cartCount').text(response.itemCount);
                    updateCartCount();
                }
            }).fail(function() {
                showToast('Error adding product to cart', 'error');
            });
        });
        
        function updateCartCount() {
            $.get('@Url.Action("GetCartItemCount", "Cart")', function(count) {
                $('#cartCount').text(count);
            });
        }
        
        function showToast(message, type) {
            // Simple toast implementation
            var toast = $('<div class="toast-alert alert alert-' + (type === 'success' ? 'success' : 'danger') + '">' + message + '</div>');
            toast.css({
                position: 'fixed',
                top: '20px',
                right: '20px',
                zIndex: 9999
            });
            
            $('body').append(toast);
            
            setTimeout(function() {
                toast.fadeOut(function() {
                    $(this).remove();
                });
            }, 3000);
        }
    });
</script>
}

<style>
.product-card { transition: transform 0.3s ease, box-shadow 0.3s ease; border: none; }
.product-card:hover { transform: translateY(-10px); box-shadow: 0 20px 40px rgba(0,0,0,0.2); }

.create-btn { background: linear-gradient(135deg, #ff416c, #ff4b2b); color: #fff; border: none; }
.create-btn:hover { filter: brightness(1.1); transform: translateY(-2px); }

.price { color: #ff4b2b; font-size: 1.2rem; }

.category-badge { position: absolute; top: 10px; right: 10px; background: #ff416c; color: #fff; padding: 5px 10px; border-radius: 20px; font-size: 0.8rem; font-weight: bold; }

.attr-item { font-size: 0.85rem; color: #555; }

/* Cart badge */
.cart-count {
    position: relative;
    top: -10px;
    right: 10px;
    font-size: 0.7rem;
}

/* Toast notifications */
.toast-alert {
    animation: fadeIn 0.5s, fadeOut 0.5s 2.5s;
}

@@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@@keyframes fadeOut {
    from { opacity: 1; }
    to { opacity: 0; }
}
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">